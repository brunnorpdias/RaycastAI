import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { GithubRepositoryOut, GithubRepositoryOut$Outbound } from "./githubrepositoryout.js";
import { JobMetadataOut, JobMetadataOut$Outbound } from "./jobmetadataout.js";
import { TrainingParameters, TrainingParameters$Outbound } from "./trainingparameters.js";
import { WandbIntegrationOut, WandbIntegrationOut$Outbound } from "./wandbintegrationout.js";
/**
 * The current status of the fine-tuning job.
 */
export declare const Status: {
    readonly Queued: "QUEUED";
    readonly Started: "STARTED";
    readonly Validating: "VALIDATING";
    readonly Validated: "VALIDATED";
    readonly Running: "RUNNING";
    readonly FailedValidation: "FAILED_VALIDATION";
    readonly Failed: "FAILED";
    readonly Success: "SUCCESS";
    readonly Cancelled: "CANCELLED";
    readonly CancellationRequested: "CANCELLATION_REQUESTED";
};
/**
 * The current status of the fine-tuning job.
 */
export type Status = ClosedEnum<typeof Status>;
/**
 * The object type of the fine-tuning job.
 */
export declare const ObjectT: {
    readonly Job: "job";
};
/**
 * The object type of the fine-tuning job.
 */
export type ObjectT = ClosedEnum<typeof ObjectT>;
export type Integrations = WandbIntegrationOut;
export type Repositories = GithubRepositoryOut;
export type JobOut = {
    /**
     * The ID of the job.
     */
    id: string;
    autoStart: boolean;
    hyperparameters: TrainingParameters;
    /**
     * The name of the model to fine-tune.
     */
    model: string;
    /**
     * The current status of the fine-tuning job.
     */
    status: Status;
    /**
     * The type of job (`FT` for fine-tuning).
     */
    jobType: string;
    /**
     * The UNIX timestamp (in seconds) for when the fine-tuning job was created.
     */
    createdAt: number;
    /**
     * The UNIX timestamp (in seconds) for when the fine-tuning job was last modified.
     */
    modifiedAt: number;
    /**
     * A list containing the IDs of uploaded files that contain training data.
     */
    trainingFiles: Array<string>;
    /**
     * A list containing the IDs of uploaded files that contain validation data.
     */
    validationFiles?: Array<string> | null | undefined;
    /**
     * The object type of the fine-tuning job.
     */
    object?: "job" | undefined;
    /**
     * The name of the fine-tuned model that is being created. The value will be `null` if the fine-tuning job is still running.
     */
    fineTunedModel?: string | null | undefined;
    /**
     * Optional text/code that adds more context for the model. When given a `prompt` and a `suffix` the model will fill what is between them. When `suffix` is not provided, the model will simply execute completion starting with `prompt`.
     */
    suffix?: string | null | undefined;
    /**
     * A list of integrations enabled for your fine-tuning job.
     */
    integrations?: Array<WandbIntegrationOut> | null | undefined;
    /**
     * Total number of tokens trained.
     */
    trainedTokens?: number | null | undefined;
    repositories?: Array<GithubRepositoryOut> | undefined;
    metadata?: JobMetadataOut | null | undefined;
};
/** @internal */
export declare const Status$inboundSchema: z.ZodNativeEnum<typeof Status>;
/** @internal */
export declare const Status$outboundSchema: z.ZodNativeEnum<typeof Status>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Started: "STARTED";
        readonly Validating: "VALIDATING";
        readonly Validated: "VALIDATED";
        readonly Running: "RUNNING";
        readonly FailedValidation: "FAILED_VALIDATION";
        readonly Failed: "FAILED";
        readonly Success: "SUCCESS";
        readonly Cancelled: "CANCELLED";
        readonly CancellationRequested: "CANCELLATION_REQUESTED";
    }>;
    /** @deprecated use `Status$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Started: "STARTED";
        readonly Validating: "VALIDATING";
        readonly Validated: "VALIDATED";
        readonly Running: "RUNNING";
        readonly FailedValidation: "FAILED_VALIDATION";
        readonly Failed: "FAILED";
        readonly Success: "SUCCESS";
        readonly Cancelled: "CANCELLED";
        readonly CancellationRequested: "CANCELLATION_REQUESTED";
    }>;
}
/** @internal */
export declare const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT>;
/** @internal */
export declare const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ObjectT$ {
    /** @deprecated use `ObjectT$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Job: "job";
    }>;
    /** @deprecated use `ObjectT$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Job: "job";
    }>;
}
/** @internal */
export declare const Integrations$inboundSchema: z.ZodType<Integrations, z.ZodTypeDef, unknown>;
/** @internal */
export type Integrations$Outbound = WandbIntegrationOut$Outbound;
/** @internal */
export declare const Integrations$outboundSchema: z.ZodType<Integrations$Outbound, z.ZodTypeDef, Integrations>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Integrations$ {
    /** @deprecated use `Integrations$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WandbIntegrationOut, z.ZodTypeDef, unknown>;
    /** @deprecated use `Integrations$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WandbIntegrationOut$Outbound, z.ZodTypeDef, WandbIntegrationOut>;
    /** @deprecated use `Integrations$Outbound` instead. */
    type Outbound = Integrations$Outbound;
}
export declare function integrationsToJSON(integrations: Integrations): string;
export declare function integrationsFromJSON(jsonString: string): SafeParseResult<Integrations, SDKValidationError>;
/** @internal */
export declare const Repositories$inboundSchema: z.ZodType<Repositories, z.ZodTypeDef, unknown>;
/** @internal */
export type Repositories$Outbound = GithubRepositoryOut$Outbound;
/** @internal */
export declare const Repositories$outboundSchema: z.ZodType<Repositories$Outbound, z.ZodTypeDef, Repositories>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Repositories$ {
    /** @deprecated use `Repositories$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GithubRepositoryOut, z.ZodTypeDef, unknown>;
    /** @deprecated use `Repositories$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GithubRepositoryOut$Outbound, z.ZodTypeDef, GithubRepositoryOut>;
    /** @deprecated use `Repositories$Outbound` instead. */
    type Outbound = Repositories$Outbound;
}
export declare function repositoriesToJSON(repositories: Repositories): string;
export declare function repositoriesFromJSON(jsonString: string): SafeParseResult<Repositories, SDKValidationError>;
/** @internal */
export declare const JobOut$inboundSchema: z.ZodType<JobOut, z.ZodTypeDef, unknown>;
/** @internal */
export type JobOut$Outbound = {
    id: string;
    auto_start: boolean;
    hyperparameters: TrainingParameters$Outbound;
    model: string;
    status: string;
    job_type: string;
    created_at: number;
    modified_at: number;
    training_files: Array<string>;
    validation_files?: Array<string> | null | undefined;
    object: "job";
    fine_tuned_model?: string | null | undefined;
    suffix?: string | null | undefined;
    integrations?: Array<WandbIntegrationOut$Outbound> | null | undefined;
    trained_tokens?: number | null | undefined;
    repositories?: Array<GithubRepositoryOut$Outbound> | undefined;
    metadata?: JobMetadataOut$Outbound | null | undefined;
};
/** @internal */
export declare const JobOut$outboundSchema: z.ZodType<JobOut$Outbound, z.ZodTypeDef, JobOut>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace JobOut$ {
    /** @deprecated use `JobOut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<JobOut, z.ZodTypeDef, unknown>;
    /** @deprecated use `JobOut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<JobOut$Outbound, z.ZodTypeDef, JobOut>;
    /** @deprecated use `JobOut$Outbound` instead. */
    type Outbound = JobOut$Outbound;
}
export declare function jobOutToJSON(jobOut: JobOut): string;
export declare function jobOutFromJSON(jsonString: string): SafeParseResult<JobOut, SDKValidationError>;
//# sourceMappingURL=jobout.d.ts.map