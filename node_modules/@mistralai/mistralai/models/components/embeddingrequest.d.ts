import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Text to embed.
 */
export type Inputs = string | Array<string>;
export type EmbeddingRequest = {
    /**
     * ID of the model to use.
     */
    model?: string | undefined;
    /**
     * Text to embed.
     */
    inputs: string | Array<string>;
};
/** @internal */
export declare const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown>;
/** @internal */
export type Inputs$Outbound = string | Array<string>;
/** @internal */
export declare const Inputs$outboundSchema: z.ZodType<Inputs$Outbound, z.ZodTypeDef, Inputs>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Inputs$ {
    /** @deprecated use `Inputs$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown>;
    /** @deprecated use `Inputs$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Inputs$Outbound, z.ZodTypeDef, Inputs>;
    /** @deprecated use `Inputs$Outbound` instead. */
    type Outbound = Inputs$Outbound;
}
export declare function inputsToJSON(inputs: Inputs): string;
export declare function inputsFromJSON(jsonString: string): SafeParseResult<Inputs, SDKValidationError>;
/** @internal */
export declare const EmbeddingRequest$inboundSchema: z.ZodType<EmbeddingRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type EmbeddingRequest$Outbound = {
    model: string;
    input: string | Array<string>;
};
/** @internal */
export declare const EmbeddingRequest$outboundSchema: z.ZodType<EmbeddingRequest$Outbound, z.ZodTypeDef, EmbeddingRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EmbeddingRequest$ {
    /** @deprecated use `EmbeddingRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EmbeddingRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EmbeddingRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EmbeddingRequest$Outbound, z.ZodTypeDef, EmbeddingRequest>;
    /** @deprecated use `EmbeddingRequest$Outbound` instead. */
    type Outbound = EmbeddingRequest$Outbound;
}
export declare function embeddingRequestToJSON(embeddingRequest: EmbeddingRequest): string;
export declare function embeddingRequestFromJSON(jsonString: string): SafeParseResult<EmbeddingRequest, SDKValidationError>;
//# sourceMappingURL=embeddingrequest.d.ts.map